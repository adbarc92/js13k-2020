/**
 * IN2 Logic Tree File
 *
 * This file has been generated by an IN2 compiler.
 */
/*eslint-disable-line*/ function run(isDryRun) {
  /* global player, core, engine */
  const files = {};
  const scope = {};
  const CURRENT_NODE_VAR = 'curIN2n';
  const CURRENT_FILE_VAR = 'curIN2f';
  const LAST_FILE_VAR = 'lasIN2f';

  files[`Intro.json`] = id => {
    player.set(CURRENT_FILE_VAR, 'Intro.json');
    // text
    scope.cuL = () => {
      player.set(CURRENT_NODE_VAR, 'cuL');
      let text = `Controls`;
      core.say(text, scope.t2H);
    };

    // text
    scope.t2H = () => {
      player.set(CURRENT_NODE_VAR, 't2H');
      let text = `Movement/Menu Choice: Arrow Keys`;
      core.say(text, scope.yqO);
    };

    // text
    scope.yqO = () => {
      player.set(CURRENT_NODE_VAR, 'yqO');
      let text = `Jump: Spacebar`;
      core.say(text, scope.KQf);
    };

    // text
    scope.KQf = () => {
      player.set(CURRENT_NODE_VAR, 'KQf');
      let text = `Select Menu Option: Enter`;
      core.say(text, scope.UPr);
    };

    // next_file
    scope.UPr = () => {
      player.set(LAST_FILE_VAR, player.get(CURRENT_FILE_VAR));
      let key = `IntroEnd.json`;
      let func = files[key];
      if (func) {
        func();
      } else {
        core.say(
          `EXECUTION WARNING, no file exists named ${key}. You are probably running a subset of all the files, and not the whole scenario. ` +
            Object.keys(files),
          files.exit
        );
      }
    };

    if (id === undefined) {
      scope.cuL();
    } else if (id) {
      scope[id]();
    }
    return player.state;
  };
  files.exit = () => {
    core.exit();
  };
  if (!isDryRun) {
    files['Intro.json']();
  }
  return { files, scope };
}
